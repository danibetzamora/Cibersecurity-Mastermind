PENTESTING


	COMANDOS E INFORMACIÓN GENERAL

		route -n -> Sirve para ver la tabla de enrutamiento. En este caso, nos permite conocer cual es nuestro gateway (router)

		ping -c 1 10.0.2.2 -> Permite hacer ping transmitiendo solamente 1 paquete

			Si responde (se recibe un paquete), la máquina está activa

			ttl = Time To Live -> Dependiendo del TTL se puede identificar que tipo de máquina es

				64 -> Linux

				128 -> Windows

				254 -> Solaris

		ping -c 1 10.0.2.2 -R -> Imprime la ruta

		hostname -I -> Permite ver todas las IP del 

		mkdir {nmap,conten,scripts,tmp,exploits} -> Permite crear todas las carpetas en un solo comando


	NMAP (Procedimiento S4vitar)

		Herramienta que sirve para escanear los puertos de los diferentes hosts de una red así como los propios hosts

		En primer lugar, se llevará a cabo una modificación del fichero ./bashrc (ya que es la shell que se está usando) para añadirle una función que cree los directorios que necesitamos para el escaneo con nmap. Concretamente se añadirá lo siguiente:

			function mkt() {

				mkdir {content,exploits,nmap,scripts,tmp}

			}

		Cada vez que se haga alguna modificación al fichero .bashrc se deberá ejecutar lo siguiente -> source ~/.bashrc -> De esta manera los cambios son persistentes

		nmap 10.0.2.2 -p- -> Con este comando indicamos que queremos escanear todos los puertos desde el 1 hasta el 65535

			También se puede hacer así -> nmap 10.0.2.2 -p1-65535

		nmap 10.0.2.2 -p- --open -T5 -v -n -oG allPorts -> Con estas opciones extra se le indica con --open que busque puertos abiertos, con -T un "timing template" de 5 (es el más rapido), con -v que sea verbose, con -n que no haga resolución DNS para que no se demore, con -oG que redija el output a un fichero "grepeable" llamado "allPorts"

			Los puertos pueden estar closed, opened, filtered...

		grep -oP '\d{1,5}/open' allPorts | awk '{print $1}' FS="/" | xargs | tr ' ' ',' -> Con este comando y el fichero "grepeable" obtenido con nmap, podemos obtener un listado de todos los puertos abiertos separados por comas

			- Con grep -oP '\d{1,5}/open' le decimos al grep que filtre del fichero "allPorts" exactamente aquellos números decimales de 1 a 5 dígitos seguidos de un "/open" (-o muestra el resultado exclusivamente, dedicando una línea a cada ocurrencia encontrada)

			- Con el comando awk se extrae solo el número, teniendo en cuenta como separador "/"

			- xargs permite ejecutar en paralelo, por lo que los números (puertos) se mostrarán en una única línea

			- Con tr sustituimos los espacios por comas

		nmap -sC -sV -p80,443 127.0.0.1 -oN targeted -> De esta manera podemos hacer un análisis de los puertos encontrados, exportando los resultados a un fichero con estructura nmap llamado "targeted"

		whatweb https://www.ejemplo.com 2>/dev/null -> Imprime la información más relevante acerca de un dominio

		wappalyzer -> Plugin Web que analiza un dominio de forma 

		nmap -sS --min-rate 5000 --open -vvv -n -Pn -p- 10.0.2.2 -> De esta manera se agiliza mucho el escaneo, pues hacemos escaneo TCP SYN (sS) el cual no termina el handshake,
		con --min-rate le indicamos que queremos transmitir como mínimo 5000 paquetes por segundo, y con -Pn le decimos que no haga descubrimiento de hosts (ARP)

		nmap -sC -sV -p135,445,902,912,5040 10.0.2.2 -oN targeted -> Escaneo de Scripts y Escaneo de Version y Servicio de los puertos (con output en fichero nmap)

		updatedb -> Permite actualizar la base de datos existente con todos los archivos del sistema para poder localizarlos

		locate fichero -> Localiza la ruta absoluta en la que se encuentra el fichero 

		locate .nse | xargs grep "categories" | grep -oP '".*?"' | sort -u -> Obtenemos todas las categorías de los scripts de nmap



	NMAP (COMANDOS ÚTILES/MÁS USADOS)

		nmap -v 127.0.0.1 -> Analiza y muestra todos los puertos TCP (opción -v de verbose)

		nmap 192.168.1.1-115 -> Escanea un rango de IPs

		nmap -p 80 192.168.1.1 -> Escanea un puerto en concreto

		nmap -p 80-995 192.168.1.1 -> Escanea un rango de puertos

		nmap -p- 192.168.1.1 -> Escanea todos los puertos disponibles (65535)


		ESCANEO TCP SYN (Se envía un único paquete SYN)

			Determina si el puerto objetivo está escuchando. 

			Hace uso de una técnica llamada "half-opening", porque comienza una conexión de forma normal pero no se lleva a cabo el handshake. Si el intérprete recibe una respuesta, el puerto está escuchando.

			nmap -sS 192.168.1.100


		ESCANEO TCP CONNECT

			En este caso si se realiza un 3-way-handshake, es decir, una conexión completa vía TCP

			Es más lento que un escaneo SYN porque tiene que realizar una conexión completa

			nmap -sT 192.168.1.100


		nmap -O 192.168.1.1 -> Escaneo del sistema operativo de una máquina

		nmap -A 192.168.1.1 -> Escaneo del sistema operativo y análisis de los servicios

		nmap -sP 192.168.1.0/24 -> Escaneo simple de la red (podemos obtener la MAC Address de los equipos de la red)

		nmap -F 192.168.1.0/24 -> Escaneo de red con puertos (-F indica que sea fast, y solo analizará los puertos comunes)



	TSHARK, TCPDUMP Y SCRIPTS NMAP

		En primer lugar se hace un escaneo común de la máquina -> nmap --open -T5 -p- -v -n 10.0.2.15 -oG allPorts

		Extraemos la información esencial del fichero con los scripts que se han creado -> extractPorts allPorts

		Hacemos un escaneo de los puertos encontrados para ver sus versiones -> nmap -sC -sV -p 80,443 10.0.2.15 -oN targeted

		Localizamos el script de nmap encargado de enumerar los directorios que se encuentran bajo una web -> locate http-enum

		Usamos el script en cuestion -> nmap -p 80 10.0.2.15 --script http-

		/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -> Fichero con diccionario de directorios web

		Escaneamos los paquetes emitidos con tcpdump -> tcpdump -i eth0 -w webScan -v (se indica la interfaz de red, se escribe en webScan y modo verbose)

		Vemos la captura del tráfico con tshark filtrando por http -> tshark -r webScan -Y "http"

		Filtramos por tcp.payload (es lo importante de la petición http) -> tshark -r httpScan -Y "http" -Tfields -e tcp.payload 2> /dev/null

		Convertimos de hexadecimal a formato legible y filtramos por peticiones GET (páginas que se están probando) -> tshark -r httpScan -Y "http" -Tfields -e tcp.payload 2> /dev/null | xxd -ps -r | grep "GET"